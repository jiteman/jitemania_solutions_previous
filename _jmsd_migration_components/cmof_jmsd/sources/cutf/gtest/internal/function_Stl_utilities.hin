#pragma once

#include "function_Stl_utilities.h"


#include "Random_number_generator.h"

#include <algorithm>


namespace jmsd {
namespace cutf {
namespace internal {


// Returns the number of elements in the given container that satisfy the given predicate.
template< class Container, typename Predicate >
// static
int function_Stl_utilities::CountIf( Container const &c, Predicate predicate ) {
	// Implemented as an explicit loop since std::count_if() in libCstd on Solaris has a non-standard signature.
	int count = 0;

	for ( typename Container::const_iterator it = c.begin(); it != c.end(); ++it ) {
		if ( predicate( *it) ) {
			++count;
		}
	}

	return count;
}

// Applies a function/functor to each element in the container.
template< class Container, typename Functor >
// static
void function_Stl_utilities::ForEach( Container const &c, Functor functor ) {
	::std::for_each(c.begin(), c.end(), functor);
}

// Returns the i-th element of the vector, or default_value if i is not in range [0, v.size()).
template< typename E >
// static
E function_Stl_utilities::GetElementOr( ::std::vector< E > const &v, int i, E default_value ) {
	return
		( i < 0 || i >= static_cast< int >( v.size() ) ) ?
			default_value :
			v[ static_cast< size_t >( i ) ];
}

// Performs an in-place shuffle of a range of the vector's elements.
// 'begin' and 'end' are element indices as an STL-style range;
// i.e. [begin, end) are shuffled, where 'end' == size() means to
// shuffle to the end of the vector.
template< typename E >
// static
void function_Stl_utilities::ShuffleRange( Random *random, int begin, int end, ::std::vector< E > *v ) {
	int const size = static_cast< int >( v->size() );
	GTEST_CHECK_( 0 <= begin && begin <= size ) << "Invalid shuffle range start " << begin << ": must be in range [0, " << size << "].";
	GTEST_CHECK_(begin <= end && end <= size) << "Invalid shuffle range finish " << end << ": must be in range [" << begin << ", " << size << "].";

	// Fisher-Yates shuffle, from
	// http://en.wikipedia.org/wiki/Fisher-Yates_shuffle
	for ( int range_width = end - begin; range_width >= 2; range_width-- ) {
		int const last_in_range = begin + range_width - 1;
		int const selected = begin + static_cast< int >( random->Generate( static_cast< uint32_t >( range_width ) ) );
		::std::swap( ( *v )[ static_cast< size_t >( selected ) ], ( *v )[ static_cast< size_t >( last_in_range ) ]);
	}
}

// Performs an in-place shuffle of the vector's elements.
template< typename E >
// static
void function_Stl_utilities::Shuffle( Random *random, ::std::vector< E > *v ) {
	ShuffleRange( random, 0, static_cast< int >( v->size() ), v );
}


} // namespace internal
} // namespace cutf
} // namespace jmsd
