#include "ctf_library_main.h"

#include "jmsd/ctf/modification/Writable_command_line_arguments.h"
#include "jmsd/ctf/modification/Configurable_event_listener.h"

#include "gtest/Test_event_listeners.h"
#include "gtest/run_all_tests.h"

#include "gtest/gtest.h"


namespace jmsd {
namespace ctf {


int ctf_main( int const argc, char const *const argv[], bool const /*do_warn_about_mocks*/ ) {
	{ // base and flags initialization
		::jmsd::ctf::modification::Writable_command_line_arguments writable_command_line_arguments( argc, argv );

		::testing::InitGoogleTest(
			writable_command_line_arguments.take_argument_counter(),
			writable_command_line_arguments.take_argument_string_array() );

		// Ensures that the tests pass no matter what value of --gmock_catch_leaked_mocks and --gmock_verbose the user specifies.
//		testing::GMOCK_FLAG( catch_leaked_mocks ) = true;
//		testing::GTEST_FLAG( list_tests ) = true;

//		testing::GMOCK_FLAG( verbose ) =
//			do_warn_about_mocks ?
//				testing::internal::kWarningVerbosity :
//				testing::internal::kErrorVerbosity;
	}

	{ // will only print errors, not successes
		cutf::TestEventListeners &listeners = cutf::UnitTest::GetInstance()->listeners();
		auto default_printer = listeners.Release( listeners.default_result_printer() );
		auto the_listener = new ::jmsd::ctf::modification::Configurable_event_listener( default_printer );
		listeners.Append( the_listener );
	}

	return ::jmsd::cutf::RUN_ALL_TESTS();
}


} // namespace ctf
} // namespace jmsd
